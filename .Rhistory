folder = 'C:\\Users\\sigal\\OneDrive - post.bgu.ac.il\\sigal\\build courses\\data science\\2018\\classes\\class7'
setwd(folder)
folder = 'E:\\Sadna_Lamadan\\Assignment 3\\termDocMatrix'
folder = 'E:\\Sadna_Lamadan\\Assignment 3\\termDocMatrix'
setwd(folder)
#Or for all chuncks in this Rmarkdown:
knitr::opts_knit$set(root.dir = folder)
install.packages("knitr")
library("knitr", lib.loc="~/R/win-library/3.4")
folder = 'E:\\Sadna_Lamadan\\Assignment 3\\termDocMatrix'
setwd(folder)
#Or for all chuncks in this Rmarkdown:
knitr::opts_knit$set(root.dir = folder)
install.packages("igraph")
#You might also need
install.packages("digest")
install.packages("rgl")
library(igraph)
g <- graph( c(1,2,1,3,2,3,3,5), n=5 )
g
library("rgl", lib.loc="~/R/win-library/3.4")
library("knitr", lib.loc="~/R/win-library/3.4")
library("digest", lib.loc="~/R/win-library/3.4")
library(igraph)
g <- graph( c(1,2,1,3,2,3,3,5), n=5 )
g
class(g)
library("digest", lib.loc="~/R/win-library/3.4")
library("igraph", lib.loc="~/R/win-library/3.4")
library("knitr", lib.loc="~/R/win-library/3.4")
library("rgl", lib.loc="~/R/win-library/3.4")
summary(g)
vcount(g)
ecount(g)
E(g)
V(g)
#summary(g)
vcount(g)
ecount(g)
E(g)
V(g)
summary(g)
vcount(g)
ecount(g)
E(g)
V(g)
is.directed(g)
as.undirected(g)
g1 <- graph( c(1,2,1,3,2,3,4,5), n=5 )
g1
g1 <- graph( c(1,2,1,3,2,3,4,5), n=5 )
g1
plot(g1)
g1 <- graph( c(1,2,1,3,2,3,4,5), n=5 )
g1
g1 <- graph( c(1,1,1,3,2,3,4,5), n=5 )
g1
g1 <- graph( c(1,1,1,3,2,3,4,5), n=5 )
g1
plot (g1)
g1 <- graph( c(1,1,1,3,2,3,4,5), n=5 )
g1
letters = c('A','B','C','D','E')
V(g1)$name <- letters[1:5]
print(g1)
plot(g1)
library(igraph)
g <- graph( c(1,2,1,3,2,3,3,5), n=5 )
g
plot(g)
g <- graph.ring(10)
plot(g)
## From edge lists
el <- cbind( c(5, 5, 1, 2),
c(1, 2, 2, 4) )
g <- graph.edgelist(el)
g
## From edge lists
el <- cbind( c(5, 5, 1, 2),
c(1, 2, 2, 4) )
g <- graph.edgelist(el)
plot(g)
el <- cbind( c("Alice", "Alice", "Bob", "Cecil"),
c("Bob", "Cecil", "Cecil", "Ed") )
g <- graph.edgelist(el)
g
## From edge lists
el <- cbind( c(6, 6, 1, 2),
c(1, 2, 2, 4) )
g <- graph.edgelist(el)
plot(g)
A <- matrix(sample(0:1, 100, rep=TRUE), 10, 10)
g <- graph.adjacency(A)
g
A <- matrix(sample(0:1, 100, rep=TRUE), 10, 10)
g <- graph.adjacency(A)
plot(g)
## Create undirected example graph
g2 <- graph.formula(Alice-Bob:Cecil:Daniel,
Cecil:Daniel-Eugene:Gordon )
plot(g2)
g3 <- delete.vertices(g2, 1)
g3
g4 <- add.vertices(g3, 3)
g4
g3 <- delete.vertices(g2, 1)
plot(g3)
g4 <- add.vertices(g3, 3)
plot(g4)
g4 <- add.vertices(g3, 3, attr=list(name=c("Helen", "Ike", "Jane")))
g4
g4 <- add.edges(g4, c(6,7, 5,7))
g4
as.vector(E(g2, P=c(1,2)))
E(g2)[ adj(1) ]
E(g2)[ from(3) ]
E(g2)[ to(2) ]
E(g2, path=c(1,4,5))
ga.data <- read.csv('ga_edgelist.csv', header = T)
g <- graph.data.frame(ga.data,directed = F)
summary(g)
V(g)$name
g$layout <- layout.fruchterman.reingold(g)
plot(g)
g$layout <- layout.circle(g)
plot(g)
g$layout <- layout.kamada.kawai(g)
plot(g)
tkplot(g, layout = layout.kamada.kawai)
degr.score <- degree(g)
degr.score
md <- as.numeric(which(max(degr.score) == degr.score))
md
g_<-delete.vertices(g, md)
plot(g_)
V(g)$size <- degree(g) * 2 # multiply by 2 for scale
plot(g)
V(g)$label <- NA # remove labels for now
plot(g)
V(g)$color <- "purple"
plot(g)
ga.data <- read.csv('ga_edgelist.csv', header=TRUE, stringsAsFactors=FALSE)
ga.vrtx <- read.csv('ga_actors.csv', header=TRUE, stringsAsFactors=FALSE)
g <- graph.data.frame(ga.data, vertices=ga.vrtx, directed=FALSE)
g
V(g)$gender
V(g)$size <- 7 # Set size to all nodes
V(g)$color <- "powderblue"
females <- which(V(g)$gender == "F")
V(g)$color[females] <- "pink"
plot(g)
V(g)$label <- NA # remove labels
g$layout <- layout.kamada.kawai(g)
plot(g)
knitr::opts_chunk$set(echo = TRUE)
ga.data <- read.csv('ga_edgelist.csv', header=TRUE, stringsAsFactors=FALSE)
folder = 'E:\\Sadna_Lamadan\\Assignment 3\\termDocMatrix'
setwd(folder)
#Or for all chuncks in this Rmarkdown:
knitr::opts_knit$set(root.dir = folder)
install.packages("igraph")
#You might also need
install.packages("digest")
install.packages("rgl")
ga.data <- read.csv('ga_edgelist.csv', header=TRUE, stringsAsFactors=FALSE)
ga.vrtx <- read.csv('ga_actors.csv', header=TRUE, stringsAsFactors=FALSE)
g <- graph.data.frame(ga.data, vertices=ga.vrtx, directed=FALSE)
g
ga.data <- read.csv('ga_edgelist.csv', header=TRUE, stringsAsFactors=FALSE)
ga.vrtx <- read.csv('ga_actors.csv', header=TRUE, stringsAsFactors=FALSE)
g <- graph.data.frame(ga.data, vertices=ga.vrtx, directed=FALSE)
plot(g)
estimate_betweenness(g, vids = V(graph), directed = FALSE, cutoff,
weights = NULL, nobigint = TRUE)
estimate_betweenness(g, vids = V(g), directed = FALSE, cutoff,
weights = NULL, nobigint = TRUE)
estimate_betweenness(g, vids = V(g), directed = FALSE, cutoff=0,
weights = NULL, nobigint = TRUE)
estimate_betweenness(g, vids = V(g), directed = FALSE, cutoff=1,
weights = NULL, nobigint = TRUE)
estimate_betweenness(g, vids = V(g), directed = FALSE, cutoff=33,
weights = NULL, nobigint = TRUE)
#estimate_betweenness(g, vids = V(g), directed = FALSE, cutoff=33,
# weights = NULL, nobigint = TRUE)
betweenness(g, v = V(g), directed = FALSE, weights = NULL,
nobigint = TRUE, normalized = FALSE)
max(betweenness(g, v = V(g), directed = FALSE, weights = NULL,
nobigint = TRUE, normalized = FALSE))
#estimate_betweenness(g, vids = V(g), directed = FALSE, cutoff=33,
# weights = NULL, nobigint = TRUE)
betweenness(g, v = V(g), directed = FALSE, weights = NULL,
nobigint = TRUE, normalized = FALSE)
calculated_betweenness <- betweenness(g, v = V(g), directed = FALSE, weights = NULL,
nobigint = TRUE, normalized = FALSE)
calculated_betweenness <- betweenness(g, v = V(g), directed = FALSE, weights = NULL,
nobigint = TRUE, normalized = FALSE)
calculated_betweenness
max(calculated_betweenness)
calculated_betweenness[max(calculated_betweenness)]
which(max(calculated_betweenness))
as.numeric(which(max(calculated_betweenness)))
b <- as.numeric(which(max(calculated_betweenness)))
b <- as.numeric(which(calculated_betweenness == max(calculated_betweenness)))
b
b <- as.character(which(calculated_betweenness == max(calculated_betweenness)))
b <- as.character(which(calculated_betweenness == max(calculated_betweenness)))
b
b <- as.(which(calculated_betweenness == max(calculated_betweenness)))
b <- as.name(which(calculated_betweenness == max(calculated_betweenness)))
b <- as.name(which(calculated_betweenness == max(calculated_betweenness)))
b
b <- g[as.numeric(which(calculated_betweenness == max(calculated_betweenness)))]
b
el <- cbind( c("Alice", "Alice", "Bob", "Cecil"),
c("Bob", "Cecil", "Cecil", "Ed") )
g <- graph.edgelist(el)
g[1]
el <- cbind( c("Alice", "Alice", "Bob", "Cecil"),
c("Bob", "Cecil", "Cecil", "Ed") )
g <- graph.edgelist(el)
g["Bob"]
el <- cbind( c("Alice", "Alice", "Bob", "Cecil"),
c("Bob", "Cecil", "Cecil", "Ed") )
g <- graph.edgelist(el)
plot(g)
b <- g[as.numeric(which(calculated_betweenness == max(calculated_betweenness)))]$name
b <- g$name[as.numeric(which(calculated_betweenness == max(calculated_betweenness)))]
b
b <- g[as.numeric(which(calculated_betweenness == max(calculated_betweenness)))]
calculated_betweenness <- betweenness(g, v = V(g), directed = FALSE, weights = NULL,
nobigint = TRUE, normalized = FALSE)
calculated_betweenness
ga.data <- read.csv('ga_edgelist.csv', header=TRUE, stringsAsFactors=FALSE)
ga.vrtx <- read.csv('ga_actors.csv', header=TRUE, stringsAsFactors=FALSE)
g <- graph.data.frame(ga.data, vertices=ga.vrtx, directed=FALSE)
plot(g)
calculated_betweenness <- betweenness(g, v = V(g), directed = FALSE, weights = NULL,
nobigint = TRUE, normalized = FALSE)
calculated_betweenness
b <- g[as.numeric(which(calculated_betweenness == max(calculated_betweenness)))]
b
b <- g[as.numeric(which(calculated_betweenness == max(calculated_betweenness)))]$name
b <- g$name[as.numeric(which(calculated_betweenness == max(calculated_betweenness)))]
b
b <- V(g)[as.numeric(which(calculated_betweenness == max(calculated_betweenness)))]
b
max_betweenness <- max(calculated_betweenness)
b <- V(g)[as.numeric(which(calculated_betweenness == max_betweenness))]
b
max_betweenness
calculated_closess <- closeness(g, v = V(g), directed = FALSE, mode = c("out", "in", "all", "total"), weights = NULL, normalized = FALSE)
calculated_closess <- closeness(g, v = V(g), directed = FALSE, weights = NULL, normalized = FALSE)
calculated_closess <- closeness(g, v = V(g), weights = NULL, normalized = FALSE)
calculated_closess
components(g, mode = c("strong"))
components(g, mode = c("strong"))$membership
plot(components(g, mode = c("strong"))$membership)
components(g, mode = c("strong"))$membership
ccc <- components(g, mode = c("strong"))$membership
V(g)$comp <- ccc
main <- induced_subgraph(g,V(g)$comp==1
ccc <- components(g, mode = c("strong"))$membership
V(g)$comp <- ccc
main <- induced_subgraph(g,V(g)$comp==1)
main
ccc <- components(g, mode = c("strong"))$membership
V(g)$comp <- ccc
main <- induced_subgraph(g,V(g)$comp==1)
plot(main)
main_component <- components(g, mode = c("strong"))$membership
V(g)$comp <- main_component
g_main_component <- induced_subgraph(g,V(g)$comp==1)
plot(g_main_component)
calculated_betweenness <- betweenness(g_main_component, v = V(g_main_component), directed = FALSE, weights = NULL,
nobigint = TRUE, normalized = FALSE)
calculated_betweenness
max_betweenness <- max(calculated_betweenness)
max_betweenness_character <- V(g_main_component)[as.numeric(which(calculated_betweenness == max_betweenness))]
max_betweenness_character
max_betweenness
calculated_closess <- closeness(g_main_component, v = V(g_main_component), weights = NULL, normalized = FALSE)
calculated_closess
max_closeness <- max(calculated_closeness)
calculated_closeness <- closeness(g_main_component, v = V(g_main_component), weights = NULL, normalized = FALSE)
calculated_closeness
max_closeness <- max(calculated_closeness)
max_closeness_character <- V(g_main_component)[as.numeric(which(calculated_closeness == calculated_closeness))]
max_closeness_character
calculated_closeness
max_closeness <- max(calculated_closeness)
max_closeness_character <- V(g_main_component)[as.numeric(which(calculated_closeness == max_closeness))]
max_closeness_character
calculated_closeness
max_closeness <- max(calculated_closeness)
max_closeness_character <- V(g_main_component)[as.numeric(which(calculated_closeness == max_closeness))]
max_closeness_character
max_closeness
calculated_eigenvector <- eigen_centrality(g_main_component, directed = FALSE, scale = TRUE, weights = NULL, options = arpack_defaults)
calculated_eigenvector
calculated_eigenvector <- eigen_centrality(g_main_component, directed = FALSE, scale = TRUE, weights = NULL, options = arpack_defaults)
calculated_eigenvector$vector
max_eigenvector <- max(calculated_eigenvector$vector)
max_eigenvector_character <- V(g_main_component)[as.numeric(which(calculated_eigenvector$vector == max_eigenvector))]
max_eigenvector_character
max_eigenvector
folder = 'E:\\Sadna_Lamadan\\Assignment 3\\termDocMatrix'
setwd(folder)
#Or for all chuncks in this Rmarkdown:
knitr::opts_knit$set(root.dir = folder)
#install.packages('igraph')
library(igraph)
ga.data <- read.csv('ga_edgelist.csv', header = T)
folder = 'E:\\Sadna_Lamadan\\Assignment 3\\termDocMatrix'
setwd(folder)
#Or for all chuncks in this Rmarkdown:
knitr::opts_knit$set(root.dir = folder)
#install.packages('igraph')
library(igraph)
ga.data <- read.csv('ga_edgelist.csv', header = T)
install.packages('igraph')
library(igraph)
ga.data <- read.csv('ga_edgelist.csv', header = T)
folder = 'E:\\Sadna_Lamadan\\Assignment 3'
setwd(folder)
#Or for all chuncks in this Rmarkdown:
knitr::opts_knit$set(root.dir = folder)
#install.packages('igraph')
library(igraph)
ga.data <- read.csv('ga_edgelist.csv', header = T)
folder = 'E:\\Sadna_Lamadan\\Assignment 3\\termDocMatrix'
setwd(folder)
#Or for all chuncks in this Rmarkdown:
knitr::opts_knit$set(root.dir = folder)
#install.packages('igraph')
library(igraph)
ga.data <- read.csv('ga_edgelist.csv', header = T)
folder = 'E:\\Sadna_Lamadan\\Assignment 3\\termDocMatrix'
setwd(folder)
#Or for all chuncks in this Rmarkdown:
knitr::opts_knit$set(root.dir = folder)
ga.data <- read.csv('ga_edgelist.csv', header = T)
g <- graph.data.frame(ga.data,directed = F)
#install.packages('igraph')
library(igraph)
ga.data <- read.csv('ga_edgelist.csv', header = T)
#install.packages('igraph')
#library(igraph)
ga.data <- read.csv('ga_edgelist.csv', header = T)
#install.packages('igraph')
library(igraph)
ga2.data <- read.csv('ga_edgelist.csv', header = T)
#install.packages('igraph')
library(igraph)
ga.data <- read.csv("ga_edgelist.csv", header = T)
folderr = 'E:\\Sadna_Lamadan\\Assignment 3\\termDocMatrix'
setwd(folderr)
#Or for all chuncks in this Rmarkdown:
knitr::opts_knit$set(root.dir = folderr)
#install.packages('igraph')
library(igraph)
ga.data <- read.csv("ga_edgelist.csv", header = T)
folder = 'E:\\Sadna_Lamadan\\Assignment 3\\termDocMatrix'
setwd(folder)
#Or for all chuncks in this Rmarkdown:
knitr::opts_knit$set(root.dir = folder)
#install.packages('igraph')
library(igraph)
ga.data <- read.csv("ga_edgelist.csv", header = T)
#install.packages('igraph')
library(igraph)
ga.data <- read.csv("ga_edgelist.csv", header = T)
#install.packages('igraph')
library(igraph)
ga.data
#g <- graph.data.frame(ga.data,directed = F)
#g$layout <- layout.fruchterman.reingold(g)
#plot(g)
#install.packages('igraph')
library(igraph)
ga.dat2a <- read.csv("ga_edgelist.csv", header = T)
#install.packages('igraph')
library(igraph)
ga.dat2a
folder = 'E:\\Sadna_Lamadan\\termDocMatrix'
setwd(folder)
#Or for all chuncks in this Rmarkdown:
knitr::opts_knit$set(root.dir = folder)
#install.packages('igraph')
library(igraph)
ga.dat2a <- read.csv("ga_edgelist.csv", header = T)
#install.packages('igraph')
library(igraph)
ga.dat2a <- read.csv('ga_edgelist.csv', header = T)
folder = 'E:\\Sadna_Lamadan\\termDocMatrix'
setwd(folder)
#Or for all chuncks in this Rmarkdown:
knitr::opts_knit$set(root.dir = folder)
#install.packages('igraph')
library(igraph)
ga.data <- read.csv('ga_edgelist.csv', header = T)
#install.packages('igraph')
library(igraph)
ga.data <- read.csv('ga_edgelist.csv', header = T)
#install.packages('igraph')
library(igraph)
ga.data <- read.csv('ga_edgelist.csv', header = T)
